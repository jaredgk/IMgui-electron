{
  "name": "get-package-info",
  "description": "Gets properties from package.json files in parent directories.",
  "version": "0.0.2",
  "license": "MIT",
  "main": "lib/index.js",
  "author": {
    "name": "Rahat Ahmed"
  },
  "scripts": {
    "lint": "eslint src/ test/",
    "test": "mocha --compilers js:babel-register,es6:babel-register,es6.js:babel-register test/",
    "build": "babel -d lib/ src/",
    "pretest": "npm run lint",
    "prebuild": "npm run test",
    "watch": "onchange src/ -- npm run build && echo Done",
    "dev": "npm run watch",
    "prepublish": "npm run build"
  },
  "devDependencies": {
    "babel-cli": "^6.4.0",
    "babel-eslint": "^5.0.0-beta6",
    "babel-preset-es2015": "^6.3.13",
    "babel-register": "^6.4.3",
    "chai": "^3.4.1",
    "eslint": "^1.10.3",
    "eslint-config-kellyirc": "^3.1.0",
    "mocha": "^2.3.4",
    "onchange": "^2.0.0"
  },
  "dependencies": {
    "bluebird": "^3.1.1",
    "lodash.get": "^4.0.0",
    "resolve": "^1.1.6"
  },
  "readme": "# get-package-info [![Build Status](https://travis-ci.org/rahatarmanahmed/get-package-info.svg?branch=master)](https://travis-ci.org/rahatarmanahmed/get-package-info)\nGets properties from package.json files in parent directories.\n\n## Installing\n`npm install get-package-info`\n\n## Usage\n\n### `getPackageInfo(props, dir, [cb])`\n\nSearches for properties from package.json starting from the given directory going upwards, until all properties are found. Properties are set to the first instance found, and not overwritten. It returns a promise that resolves with the results (see [example](#Example) below for the structure of the results object). You may also specify a node-style callback if you prefer.\n\n#### `props`\n\nAn array of string properties to search for. Nested properties can be retreived with dot notation (ex: `dependencies.lodash`).\n\nIf an individual property is an array, it will search for those properties in order, and the first value found will be saved under all the given properties. This is useful if you want at least one of those properties, but don't want the search to fail when it finds one but not another. Ex: `getPackageInfo([['dependencies.lodash', 'devDependencies.lodash']], dir)` will search for lodash in both `dependencies` and `devDependencies`, and save whichever one it finds first under both properties in the results.\n\n#### `dir`\n\nThe initial directory to search in. `getPackageInfo(props, dir)` will look for a package.json in `dir`, and get the requested properties. If all the properties are not found, it will look in package.json files in parent directories.\n\n## Example\n```js\nvar getPackageInfo = require('get-package-info');\n\ngetPackageInfo(['name', 'dependencies.lodash'], '/path/to/dir')\n.then((result) => {\n    console.log(result); \n});\n```\n\nPossible output, depending on the directory structure and package.json contents:\n\n```\n{\n    values: {\n        name: 'package-name',\n        'dependencies.lodash': '~3.0.0'\n    },\n    source: {\n        name: {\n            src: '/path/to/dir/package.json',\n            pkg: { ... } // the parsed package.json this property came from\n        },\n        'dependencies.lodash': {\n            src: '/path/to/package.json', // This property was found in a higher directory\n            pkg: { ... }\n        }\n    }\n}\n*/\n```\n\n## I'm getting `Error: Cannot find module 'package.json' from '/path/to/dir'`\n\nThis is an error from [`resolve`](https://github.com/substack/node-resolve) that means it was not able to find all the requested props. It would be nice to have a more descriptive error but there's no way to do that until [this PR](https://github.com/substack/node-resolve/pull/81) is merged.\n",
  "readmeFilename": "README.md",
  "_id": "get-package-info@0.0.2",
  "_from": "get-package-info@0.0.2"
}
